using User = Zytonomy.Api.Model.User;

namespace Zytonomy.Api.Endpoints.External;

/// <summary>
/// Endpoints for user related operations and events.
/// </summary>
public class UserEndpoints
{
    private UserRepository _users;
    private WorkspaceRepository _workspaces;

    public UserEndpoints(UserRepository users, WorkspaceRepository workspaces) {
        _users = users;
        _workspaces = workspaces;
    }

    /// <summary>
    /// Retrieves a user based on the ID which is generated by Azure AD B2C.  When the user registers,
    /// the user does not exist in the database so we need to create the user first.
    /// </summary>
    /// <remarks>
    /// In production, a custom API connector is probably needed to publish to a standalone Function that will
    /// push the message to a Service Bus or Event Grid to be consumed.  For now, we handle it at the UI.
    /// See: https://docs.microsoft.com/en-us/azure/active-directory-b2c/add-api-connector?pivots=b2c-custom-policy
    /// See: https://docs.microsoft.com/en-us/azure/active-directory-b2c/api-connectors-overview?pivots=b2c-custom-policy
    /// </remarks>
    /// <param name="id">The ID of the user as assigned</param>
    /// <returns>The user entity or null if the user has not yet registered.</returns>
    [FunctionName(nameof(GetUserById))]
    public async Task<IActionResult> GetUserById(
        [HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "user/{id}")] HttpRequest req,
        string id,
        ILogger log)
    {
        User user = await _users.GetByIdAsync(id);

        return new OkObjectResult(user);
    }

    /// <summary>
    /// Creates a new user based on the MSAL <c>AccountInfo</c> from the UI
    /// </summary>
    /// <returns>An empty result.</returns>
    [FunctionName(nameof(CreateUser))]
    public async Task<IActionResult> CreateUser(
        [HttpTrigger(AuthorizationLevel.Anonymous, "post", Route = "user/create")] HttpRequest req,
        ILogger log)
    {
        // TODO: Make this based on the Azure AD API Connector
        string requestBody = await new StreamReader(req.Body).ReadToEndAsync();

        log.LogInformation(requestBody);

        User user = JsonSerializer.Deserialize<User>(
            requestBody,
            new JsonSerializerOptions{
                PropertyNameCaseInsensitive = true,
                IncludeFields = true
            });

        try {
            await _users.UpsertAsync(user);
        }
        catch(Exception exception) {
            log.LogError(exception, "Failed to insert the user.");

            return ErrorResult.Create("The user could not be persisted.");
        }

        return new EmptyResult();
    }
}
